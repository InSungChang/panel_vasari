import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(
    page_title="Dashboard Meta Ads - An√°lise Estrat√©gica Aprimorada",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- T√≠tulo Principal do Dashboard ---
st.title("üöÄ Dashboard Meta Ads - An√°lise Estrat√©gica Avan√ßada e Diagn√≥stica")
st.markdown("Fa√ßa o upload da sua planilha do Meta Ads para obter recomenda√ß√µes estrat√©gicas para otimiza√ß√£o de campanhas de Facebook e Instagram Ads.")

# --- Defini√ß√£o de Colunas (Permanecem as mesmas do v3.txt original) ---
COLUNAS = {
    'conta': 'Nome da conta',
    'campanha': 'Nome da campanha',
    'conjunto': 'Nome do conjunto de an√∫ncios',
    'anuncio': 'Nome do an√∫ncio',
    'plataforma': 'Plataforma',
    'posicionamento': 'Posicionamento',
    'dia': 'Dia',
    'objetivo': 'Objetivo',
    'alcance': 'Alcance',
    'impressoes': 'Impress√µes',
    'cliques_todos': 'Cliques (todos)',
    'cpc_todos': 'CPC (todos)',
    'investimento': 'Valor usado (BRL)',
    'frequencia': 'Frequ√™ncia',
    'cliques_link': 'Cliques no link',
    'cpc_link': 'CPC (custo por clique no link)',
    'ctr_todos': 'CTR (todos)',
    'cpm': 'CPM (custo por 1.000 impress√µes)',
    'ctr_link': 'CTR (taxa de cliques no link)',
    'conversas': 'Conversas por mensagem iniciadas',
    'custo_conversa': 'Custo por conversa por mensagem iniciada'
}

# --- Banco de Insights Aprimorados (NOVO) ---
INSIGHTS_APRIMORADOS = {
    "‚õî PAUSAR (Alto Gasto, Zero Leads)": "An√∫ncio gastou significativamente sem gerar resultados. Pausar imediatamente para evitar desperd√≠cio de or√ßamento. Criativo/segmenta√ß√£o inadequados.",
    "‚è≥ MANTER EM AN√ÅLISE (Baixo Gasto, Zero Leads)": "An√∫ncio com baixo investimento e sem convers√µes. Aguardar mais dados ou testar pequenas otimiza√ß√µes antes de pausar/descartar. Ainda est√° na fase de aprendizado.",
    "üìà DUPLICAR (Performance Excelente)": "An√∫ncio com CPL(Custo por Lead) excepcional e √≥timo CTR(Taxa de Cliques no Link). Duplicar para escalar, expandir p√∫blicos e maximizar resultados, monitorando de perto o CPL(Custo por Lead) e a frequ√™ncia.",
    "üé® NOVO CRIATIVO (Fadiga Detectada)": "Frequ√™ncia alta com CPL(Custo por Lead) aceit√°vel/ruim. O p√∫blico est√° saturado. Requer novos √¢ngulos criativos para reengajar e manter a oferta relevante.",
    "üîß OTIMIZAR (Relev√¢ncia Criativo/CTR(Taxa de Cliques no Link) Baixo)": "CPL(Custo por Lead) razo√°vel, mas CTR(Taxa de Cliques no Link) baixo. O criativo ou a copy (texto do an√∫ncio) n√£o est√£o atraindo. Ajustar copy, CTA (Chamada para A√ß√£o), imagem/v√≠deo para aumentar o engajamento e a qualifica√ß√£o dos cliques.",
    "üîß OTIMIZAR (Custo de Exibi√ß√£o Alto/CPM(Custo por Mil Impress√µes))": "CPL(Custo por Lead) razo√°vel, mas CPM(Custo por Mil Impress√µes) alto. O custo para exibir o an√∫ncio est√° elevado. Testar novos p√∫blicos, refinar segmenta√ß√£o ou ajustar lances para reduzir o custo por impress√£o.",
    "üîß OTIMIZAR (Oferta/Funil P√≥s-Clique)": "CPL(Custo por Lead) razo√°vel, com bom CTR(Taxa de Cliques no Link) e CPM(Custo por Mil Impress√µes). O problema pode estar na qualifica√ß√£o do lead, na oferta ou na experi√™ncia p√≥s-clique (ex: landing page, atendimento). Revisar a jornada do usu√°rio e a promessa do an√∫ncio.",
    "üîß OTIMIZAR (Ajustes Finas/Monitoramento)": "An√∫ncio com bom desempenho geral, mas n√£o excelente o suficiente para duplicar. Buscar pequenas melhorias cont√≠nuas, testar varia√ß√µes sutis ou apenas monitorar sua estabilidade.",
    "üîÑ RECRIAR (CPL(Custo por Lead) Invi√°vel/Criativo Inadequado)": "An√∫ncio gerando leads, mas com CPL(Custo por Lead) muito, muito alto, e n√£o √© um caso de fadiga isolada. O criativo/oferta parece fundamentalmente inadequado. Requer uma nova abordagem criativa e estrat√©gica desde o in√≠cio.",
    "üîÑ RECRIAR (M√©tricas Fracas/Sem Dire√ß√£o)": "An√∫ncio com performance geral fraca, sem uma causa √≥bvia de otimiza√ß√£o clara (n√£o √© s√≥ fadiga, nem s√≥ um CPL(Custo por Lead) alto isolado). Considerar desativar e iniciar novos testes criativos e de p√∫blico.",
    "üí° REAVALIAR ESTRAT√âGIA (Outros Cen√°rios)": "An√∫ncio que n√£o se encaixou nas categorias espec√≠ficas. Requer uma an√°lise mais aprofundada por um especialista para identificar as causas da performance e definir a pr√≥xima a√ß√£o. Pode ser um erro de segmenta√ß√£o, oferta ou produto."
}

# --- Sidebar para Configura√ß√µes dos Par√¢metros da L√≥gica (APRIMORADO) ---
st.sidebar.header("‚öôÔ∏è Configura√ß√µes de An√°lise")
st.sidebar.markdown("Ajuste os par√¢metros para refinar as recomenda√ß√µes.")

cpl_meta = st.sidebar.number_input("üéØ CPL Meta (R$) (Custo por Lead/Conversa Desejado)", min_value=1.0, value=25.0, step=1.0,
                                    help="O valor m√©dio que voc√™ deseja gastar para adquirir um lead ou iniciar uma conversa.")
ctr_meta = st.sidebar.number_input("üìä CTR Link Meta (%) (Taxa de Cliques no Link Desejada)", min_value=0.1, value=1.0, step=0.1, format="%.1f",
                                   help="A porcentagem de pessoas que clicaram no seu link ap√≥s verem o an√∫ncio. Usada para avaliar a relev√¢ncia do criativo.")
cpm_meta = st.sidebar.number_input("üí∏ CPM Meta (R$) (Custo por Mil Impress√µes Desejado)", min_value=0.1, value=25.0, step=0.5,
                                   help="O custo para exibir seu an√∫ncio mil vezes. Usado para avaliar o custo de exibi√ß√£o e satura√ß√£o do p√∫blico.")
freq_limite = st.sidebar.number_input("‚ö° Frequ√™ncia M√°xima", min_value=1.0, value=2.0, step=0.1, format="%.1f",
                                      help="N√∫mero m√©dio de vezes que uma pessoa viu o an√∫ncio. Acima deste limite, pode indicar fadiga do criativo, levando √† queda de performance.")
investimento_min = st.sidebar.number_input("üí∞ Investimento M√≠n. para Pausar (R$)", min_value=1.0, value=5.0, step=1.0,
                                         help="Valor gasto m√≠nimo para que um an√∫ncio sem conversas seja recomendado para 'Pausar'. Abaixo deste valor, ele √© 'Mantido em An√°lise' para coletar mais dados.")
valor_lead = st.sidebar.number_input("üíé Valor Estimado por Lead (R$)", min_value=10.0, value=100.0, step=10.0,
                                      help="O valor m√©dio que cada lead representa em receita ou lucro para o seu neg√≥cio. Usado para calcular o Retorno sobre o Investimento (ROI).")

# Novos par√¢metros para refinar a l√≥gica de "Otimizar" e "Recriar"
cpl_mult_duplicar = st.sidebar.number_input("Multiplicador CPL(Custo por Lead) Duplicar (vs. Meta)", min_value=0.1, value=0.7, step=0.1, format="%.1f",
                                            help="Define o limite de CPL(Custo por Lead) para 'Duplicar'. An√∫ncios com CPL(Custo por Lead) menor ou igual a (CPL Meta * este Multiplicador) ser√£o considerados para duplica√ß√£o.")
cpl_mult_recriar = st.sidebar.number_input("Multiplicador CPL(Custo por Lead) Recriar (vs. Meta)", min_value=1.5, value=2.5, step=0.1, format="%.1f",
                                           help="Define o limite de CPL(Custo por Lead) para 'Recriar'. An√∫ncios com CPL(Custo por Lead) maior que (CPL Meta * este Multiplicador) ser√£o considerados para recria√ß√£o total.")
ctr_mult_relevancia = st.sidebar.number_input("Multiplicador CTR(Taxa de Cliques no Link) Relev√¢ncia (vs. Meta)", min_value=0.1, value=0.7, step=0.1, format="%.1f",
                                              help="Define o limiar para identificar baixa relev√¢ncia criativa. CTR(Taxa de Cliques no Link) menor que (CTR Meta * este Multiplicador) indica que o criativo precisa de otimiza√ß√£o.")
taxa_conversao_meta_pct = st.sidebar.number_input("Taxa de Convers√£o Meta (%) (Cliques -> Leads)", min_value=0.1, value=5.0, step=0.1, format="%.1f",
                                                  help="A porcentagem desejada de cliques no link que resultam em uma conversa/lead. Usada para diagnosticar problemas no funil p√≥s-clique.")


# --- Fun√ß√£o de Classifica√ß√£o Aprimorada (APRIMORADO) ---
def recomendar_acao(row):
    # Garante que os valores sejam num√©ricos; NaN se houver erro ou aus√™ncia.
    cpl_calc = row.get('cpl_calculado')
    ctr_link = row.get(COLUNAS['ctr_link'])
    cpm = row.get(COLUNAS['cpm'])
    conversas = row.get(COLUNAS['conversas'])
    investimento = row.get(COLUNAS['investimento'])
    frequencia = row.get(COLUNAS['frequencia'])
    cliques_link = row.get(COLUNAS['cliques_link'])

    # Tratamento de NaNs (importante para compara√ß√µes num√©ricas)
    cpl_calc = cpl_calc if pd.notna(cpl_calc) and cpl_calc != np.inf else float('inf')
    ctr_link = ctr_link if pd.notna(ctr_link) else 0.0
    cpm = cpm if pd.notna(cpm) else float('inf')
    frequencia = frequencia if pd.notna(frequencia) else 0.0
    conversas = conversas if pd.notna(conversas) else 0.0
    investimento = investimento if pd.notna(investimento) else 0.0
    cliques_link = cliques_link if pd.notna(cliques_link) else 0.0

    # Calcula taxa de convers√£o (do clique para o lead)
    # Evita divis√£o por zero ou infinito se n√£o houver cliques no link
    taxa_conversao_clique_lead = (conversas / cliques_link * 100) if cliques_link > 0 else 0.0

    acao = ''

    # 1. L√≥gica para PAUSAR / MANTER EM AN√ÅLISE (Zero Conversas)
    if conversas == 0:
        if investimento >= investimento_min:
            acao = "‚õî PAUSAR (Alto Gasto, Zero Leads)"
        else:
            acao = "‚è≥ MANTER EM AN√ÅLISE (Baixo Gasto, Zero Leads)"
        return acao

    # --- An√∫ncios com Leads (An√°lise de Performance Detalhada) ---

    # 2. L√≥gica para DUPLICAR (Excelente Performance)
    # Combina CPL(Custo por Lead) muito baixo com CTR(Taxa de Cliques no Link) muito bom
    if cpl_calc <= cpl_meta * cpl_mult_duplicar and ctr_link >= ctr_meta * 1.2:
        acao = "üìà DUPLICAR (Performance Excelente)"
        return acao

    # 3. L√≥gica para RECRIAR (CPL(Custo por Lead) Invi√°vel - o criativo/oferta est√° fundamentalmente errado)
    # Esta √© uma falha grave, mesmo com leads, o custo √© invi√°vel
    if cpl_calc > cpl_meta * cpl_mult_recriar:
        acao = "üîÑ RECRIAR (CPL(Custo por Lead) Invi√°vel/Criativo Inadequado)"
        return acao

    # 4. L√≥gica para NOVO CRIATIVO (Fadiga)
    # An√∫ncio fadigado, mas CPL(Custo por Lead) ainda gerenci√°vel (n√£o invi√°vel)
    if frequencia >= freq_limite:
        acao = "üé® NOVO CRIATIVO (Fadiga Detectada)"
        return acao

    # 5. L√≥gica para OTIMIZAR (Diagn√≥sticos detalhados)
    # Para an√∫ncios que geram leads, n√£o s√£o excelentes, n√£o s√£o invi√°veis e n√£o est√£o fadigados
    if cpl_calc > cpl_meta * cpl_mult_duplicar and cpl_calc <= cpl_meta:
        # 5.1 Otimizar: Relev√¢ncia do Criativo (CTR(Taxa de Cliques no Link) Baixo)
        if ctr_link < ctr_meta * ctr_mult_relevancia:
            acao = "üîß OTIMIZAR (Relev√¢ncia Criativo/CTR(Taxa de Cliques no Link) Baixo)"
        # 5.2 Otimizar: Custo de Exibi√ß√£o (CPM(Custo por Mil Impress√µes) Alto)
        elif cpm > cpm_meta * 1.2: # CPM 20% acima da meta
            acao = "üîß OTIMIZAR (Custo de Exibi√ß√£o Alto/CPM(Custo por Mil Impress√µes))"
        # 5.3 Otimizar: Oferta/Funil P√≥s-Clique (Taxa de Convers√£o Baixa, mas CTR(Taxa de Cliques no Link)/CPM(Custo por Mil Impress√µes) ok)
        elif taxa_conversao_clique_lead < taxa_conversao_meta_pct:
            acao = "üîß OTIMIZAR (Oferta/Funil P√≥s-Clique)"
        # 5.4 Otimizar: Ajustes Finas (Bom desempenho, sem grandes problemas evidentes)
        else:
            acao = "üîß OTIMIZAR (Ajustes Finas/Monitoramento)"
        return acao

    # 6. Fallback - Para qualquer outro cen√°rio que gerou leads, mas n√£o se encaixou nas regras claras.
    # Ex: CPL(Custo por Lead) um pouco acima da meta, mas n√£o o suficiente para ser 'Recriar Invi√°vel', e sem fadiga.
    acao = "üí° REAVALIAR ESTRAT√âGIA (Outros Cen√°rios)"
    return acao


# --- Upload de arquivo Excel ---
file = st.file_uploader("üìÇ Fa√ßa upload da sua planilha do Meta Ads (.xlsx)", type="xlsx", help="Certifique-se de que a planilha contenha as colunas necess√°rias para a an√°lise.")

df = None

if file:
    if not file.name.endswith('.xlsx'):
        st.error("‚ùå Erro: Por favor, fa√ßa upload de um arquivo no formato **.xlsx**.")
    else:
        with st.spinner("üöÄ Processando e validando sua planilha..."):
            try:
                df_raw = pd.read_excel(file)

                if df_raw.empty:
                    st.error("üö´ Erro: O arquivo Excel carregado est√° vazio ou n√£o cont√©m dados v√°lidos. Por favor, verifique sua planilha.")
                    df = None
                else:
                    # Mapeamento de colunas (mantido do v3 original, certifique-se que seus nomes batam)
                    # Exemplo: 'Valor usado (BRL)' -> COLUNAS['investimento']
                    df_processed = df_raw.rename(columns={
                        'Nome da conta': COLUNAS['conta'],
                        'Nome da campanha': COLUNAS['campanha'],
                        'Nome do conjunto de an√∫ncios': COLUNAS['conjunto'],
                        'Nome do an√∫ncio': COLUNAS['anuncio'],
                        'Plataforma': COLUNAS['plataforma'],
                        'Posicionamento': COLUNAS['posicionamento'],
                        'Dia': COLUNAS['dia'],
                        'Objetivo': COLUNAS['objetivo'],
                        'Alcance': COLUNAS['alcance'],
                        'Impress√µes': COLUNAS['impressoes'],
                        'Cliques (todos)': COLUNAS['cliques_todos'],
                        'CPC (todos)': COLUNAS['cpc_todos'],
                        'Valor usado (BRL)': COLUNAS['investimento'],
                        'Frequ√™ncia': COLUNAS['frequencia'],
                        'Cliques no link': COLUNAS['cliques_link'],
                        'CPC (custo por clique no link)': COLUNAS['cpc_link'],
                        'CTR (todos)': COLUNAS['ctr_todos'],
                        'CPM (custo por 1.000 impress√µes)': COLUNAS['cpm'],
                        'CTR (taxa de cliques no link)': COLUNAS['ctr_link'],
                        'Conversas por mensagem iniciadas': COLUNAS['conversas'],
                        'Custo por conversa por mensagem iniciada': COLUNAS['custo_conversa']
                    })

                    # Validar se as colunas essenciais para o dashboard existem no DF
                    colunas_essenciais_para_logica = [
                        COLUNAS['investimento'], COLUNAS['conversas'], COLUNAS['campanha'],
                        COLUNAS['anuncio'], COLUNAS['ctr_link'], COLUNAS['cpm'],
                        COLUNAS['frequencia'], COLUNAS['cliques_link']
                    ]
                    missing_cols = [col for col in colunas_essenciais_para_logica if col not in df_processed.columns]

                    if missing_cols:
                        st.error(f"‚ö†Ô∏è Erro: As seguintes colunas essenciais est√£o faltando na sua planilha: **{', '.join(missing_cols)}**.\n\nPor favor, exporte seu relat√≥rio do Meta Ads com essas colunas.")
                        st.info("üí° **Dica:** Ao exportar do Meta Ads, verifique as op√ß√µes de 'Colunas' ou 'Quebrar por' para incluir todas as m√©tricas e dimens√µes necess√°rias.")
                        df = None
                    else:
                        df = df_processed.copy()

                        # Limpeza e prepara√ß√£o dos dados (mantido do v3 original, com pequenas adapta√ß√µes)
                        numeric_columns_to_process = [
                            COLUNAS['investimento'], COLUNAS['conversas'], COLUNAS['alcance'],
                            COLUNAS['impressoes'], COLUNAS['frequencia'], COLUNAS['ctr_link'],
                            COLUNAS['cpm'], COLUNAS['cliques_link']
                        ]
                        for col in numeric_columns_to_process:
                            if col in df.columns:
                                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

                        # NOVAS COLUNAS DE AN√ÅLISE (mantido do v3 original, com pequenas adapta√ß√µes)
                        st.header("üî¨ Criando An√°lises Avan√ßadas...")
                        with st.spinner("Processando an√°lises estrat√©gicas..."):
                            # 1. CPL(Custo por Lead) Calculado
                            df['cpl_calculado'] = np.where(
                                df[COLUNAS['conversas']] > 0,
                                df[COLUNAS['investimento']] / df[COLUNAS['conversas']],
                                np.inf
                            )

                            # 2. Taxa de Convers√£o (Cliques no Link -> Conversas)
                            df['taxa_conversao'] = np.where(
                                df[COLUNAS['cliques_link']] > 0,
                                df[COLUNAS['conversas']] / df[COLUNAS['cliques_link']] * 100,
                                0
                            )

                            # Aplica a fun√ß√£o de recomenda√ß√£o aprimorada
                            df['recomendacao_acao'] = df.apply(recomendar_acao, axis=1)

                            # Demais an√°lises do v3.txt (mantidas e ajustadas para as novas recomenda√ß√µes)
                            # 3. Classifica√ß√£o de Performance (Pode ser ajustado para refletir a nova l√≥gica)
                            def classificar_performance(row):
                                acao = row['recomendacao_acao']
                                if acao.startswith("‚õî PAUSAR"): return "üö® P√âSSIMO"
                                if acao.startswith("‚è≥ MANTER"): return "‚è≥ INCIPIENTE"
                                if acao.startswith("üìà DUPLICAR"): return "üèÜ EXCELENTE"
                                if acao.startswith("üé® NOVO CRIATIVO"): return "üìâ FADIGA"
                                if acao.startswith("üîß OTIMIZAR"): return "‚ö†Ô∏è REQUER OTIMIZA√á√ÉO"
                                if acao.startswith("üîÑ RECRIAR"): return "üî• RUIM"
                                if acao.startswith("üí° REAVALIAR"): return "‚ùì REAVALIAR"
                                return "‚ùì DESCONHECIDO" # Fallback

                            df['classificacao_performance'] = df.apply(classificar_performance, axis=1)

                            # 4. Efici√™ncia de Custo
                            df['eficiencia_custo'] = np.where(
                                df[COLUNAS['conversas']] > 0,
                                np.where(df['cpl_calculado'] <= cpl_meta * 0.7, 'Alto',
                                np.where(df['cpl_calculado'] <= cpl_meta, 'M√©dio', 'Baixo')),
                                'Sem Convers√£o'
                            )

                            # 5. Potencial de Escala
                            df['potencial_escala'] = np.where(
                                (df['cpl_calculado'] <= cpl_meta) & (df[COLUNAS['conversas']] >= 1),
                                'üöÄ Alto Potencial',
                                np.where(df[COLUNAS['conversas']] > 0, 'üîß Otimizar Primeiro', '‚õî N√£o Escalar')
                            )

                            # 6. Status de Fadiga (Agora mais um indicador do que uma a√ß√£o prim√°ria)
                            df['status_fadiga'] = np.where(
                                df[COLUNAS['frequencia']] >= freq_limite,
                                'üò¥ Fadiga Detectada',
                                '‚úÖ Saud√°vel'
                            )

                            # 7. Prioridade de A√ß√£o (Ajustado para novas categorias)
                            prioridade_map = {
                                '‚õî PAUSAR (Alto Gasto, Zero Leads)': 'CR√çTICA',
                                '‚è≥ MANTER EM AN√ÅLISE (Baixo Gasto, Zero Leads)': 'BAIXA',
                                'üìà DUPLICAR (Performance Excelente)': 'ALTA',
                                'üé® NOVO CRIATIVO (Fadiga Detectada)': 'M√âDIA',
                                'üîß OTIMIZAR (Relev√¢ncia Criativo/CTR(Taxa de Cliques no Link) Baixo)': 'M√âDIA',
                                'üîß OTIMIZAR (Custo de Exibi√ß√£o Alto/CPM(Custo por Mil Impress√µes))': 'M√âDIA',
                                'üîß OTIMIZAR (Oferta/Funil P√≥s-Clique)': 'M√âDIA',
                                'üîß OTIMIZAR (Ajustes Finas/Monitoramento)': 'BAIXA', # Ajustado para Baixa
                                'üîÑ RECRIAR (CPL(Custo por Lead) Invi√°vel/Criativo Inadequado)': 'CR√çTICA',
                                'üîÑ RECRIAR (M√©tricas Fracas/Sem Dire√ß√£o)': 'ALTA', # Ajustado para Alta
                                'üí° REAVALIAR ESTRAT√âGIA (Outros Cen√°rios)': 'M√âDIA' # Mantido M√©dia
                            }
                            df['prioridade'] = df['recomendacao_acao'].map(prioridade_map)


                            # 8. ROI Estimado
                            df['roi_estimado'] = np.where(
                                df[COLUNAS['investimento']] > 0,
                                ((df[COLUNAS['conversas']] * valor_lead) - df[COLUNAS['investimento']]) / df[COLUNAS['investimento']] * 100,
                                0
                            )

                            # 9. Score de Qualidade (0-100) - Mantido do v3.txt, mas com os novos par√¢metros
                            def calcular_score_qualidade(row):
                                score = 0
                                # CTR(Taxa de Cliques no Link) (30 pontos)
                                ctr_actual = row.get(COLUNAS['ctr_link'], 0)
                                if ctr_actual >= ctr_meta * 1.5: score += 30
                                elif ctr_actual >= ctr_meta: score += 20
                                elif ctr_actual >= ctr_meta * 0.5: score += 10
                                # CPL(Custo por Lead) (40 pontos)
                                if row[COLUNAS['conversas']] > 0:
                                    if row['cpl_calculado'] <= cpl_meta * 0.7: score += 40
                                    elif row['cpl_calculado'] <= cpl_meta: score += 30
                                    elif row['cpl_calculado'] <= cpl_meta * 1.5: score += 15
                                # Frequ√™ncia (20 pontos)
                                freq_actual = row.get(COLUNAS['frequencia'], 0)
                                if freq_actual <= freq_limite * 0.7: score += 20
                                elif freq_actual <= freq_limite: score += 15
                                elif freq_actual <= freq_limite * 1.3: score += 5
                                # Convers√µes (10 pontos)
                                if row[COLUNAS['conversas']] >= 3: score += 10
                                elif row[COLUNAS['conversas']] >= 1: score += 7
                                return min(score, 100) # Garante que o score n√£o ultrapasse 100

                            df['score_qualidade'] = df.apply(calcular_score_qualidade, axis=1)

                            # 10. Categoria de An√∫ncio - Mantido (Espec√≠fico do Nicho)
                            def categorizar_anuncio(nome_anuncio):
                                nome = str(nome_anuncio).upper()
                                if 'IMPLANTE' in nome: return 'ü¶∑ Implantes'
                                elif 'LENTE' in nome or 'FACETA' in nome: return '‚ú® Facetas/Lentes'
                                elif 'CLINICA' in nome: return 'üè• Institucional'
                                else: return 'üìã Outros'
                            df['categoria_anuncio'] = df[COLUNAS['anuncio']].apply(categorizar_anuncio)

                            # 11. An√°lise de Posicionamento - Mantido
                            def analisar_posicionamento(posicionamento):
                                pos = str(posicionamento).lower()
                                if 'feed' in pos: return 'üì± Feed'
                                elif 'stories' in pos or 'story' in pos: return 'üìñ Stories'
                                elif 'reels' in pos: return 'üé• Reels'
                                elif 'video' in pos: return 'üì∫ V√≠deo'
                                else: return 'üîÑ Outros'
                            df['categoria_posicionamento'] = df[COLUNAS['posicionamento']].apply(analisar_posicionamento)

                            # 12. Efici√™ncia por Impress√£o (leads por 1000 impress√µes)
                            df['eficiencia_impressao'] = np.where(
                                df[COLUNAS['impressoes']] > 0,
                                df[COLUNAS['conversas']] / df[COLUNAS['impressoes']] * 1000,
                                0
                            )

                        st.success("‚úÖ An√°lises criadas com sucesso!")

            except Exception as e:
                st.error(f"üíî Ocorreu um erro inesperado ao ler o arquivo. Por favor, verifique se √© um arquivo Excel v√°lido e n√£o est√° corrompido. Detalhes do erro: `{e}`")
                df = None
else:
    st.info("‚¨ÜÔ∏è Fa√ßa o upload de uma planilha .xlsx para come√ßar a visualizar seu dashboard.")

# --- O restante do seu c√≥digo do dashboard s√≥ ser√° executado se 'df' n√£o for None ---
if df is not None:
    # DASHBOARD PRINCIPAL
    st.header("üìä Dashboard de Performance")

    # M√©tricas principais
    col1, col2, col3, col4, col5 = st.columns(5)
    total_investido = df[COLUNAS['investimento']].sum()
    total_leads = df[COLUNAS['conversas']].sum()
    cpl_medio = total_investido / total_leads if total_leads > 0 else 0

    col1.metric("üí∞ Investimento Total", f"R$ {total_investido:,.2f}")
    col2.metric("üéØ Total de Leads", f"{int(total_leads)}")
    col3.metric("üìà CPL(Custo por Lead) M√©dio", f"R$ {cpl_medio:,.2f}")
    col4.metric("üëÅÔ∏è Impress√µes", f"{df[COLUNAS['impressoes']].sum():,.0f}")
    col5.metric("‚ö° CTR(Taxa de Cliques no Link) M√©dio", f"{df[COLUNAS['ctr_link']].mean():.2f}%")

    # Distribui√ß√£o de a√ß√µes recomendadas (NOVO E MELHORADO)
    st.subheader("üéØ Distribui√ß√£o de Recomenda√ß√µes")
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("##### Tipos de A√ß√µes Recomendadas")
        acao_counts = df['recomendacao_acao'].value_counts()

        # Define um mapa de cores mais simples baseado no tipo principal de a√ß√£o
        simplified_colors_map = {
            "‚õî PAUSAR": '#DC3545',     # Vermelho para a√ß√µes cr√≠ticas de pausa
            "‚è≥ MANTER": '#FFC107',     # Amarelo/Laranja para manter em an√°lise
            "üìà DUPLICAR": '#28A745',   # Verde para a√ß√µes de escala
            "üé® NOVO CRIATIVO": '#17A2B8', # Ciano para novos criativos
            "üîß OTIMIZAR": '#6C757D',   # Cinza para otimiza√ß√µes
            "üîÑ RECRIAR": '#6F42C1',    # Roxo para recriar
            "üí° REAVALIAR": '#A9A9A9'   # Cinza mais claro para reavaliar
        }

        plot_colors = []
        for action_label in acao_counts.index:
            found_color = False
            for key, color in simplified_colors_map.items():
                if action_label.startswith(key):
                    plot_colors.append(color)
                    found_color = True
                    break
            if not found_color:
                plot_colors.append('#CCCCCC') # Fallback color

        fig, ax = plt.subplots(figsize=(10, 6))
        ax.bar(acao_counts.index, acao_counts.values, color=plot_colors)
        ax.set_xlabel('A√ß√£o')
        ax.set_ylabel('Quantidade de An√∫ncios')
        ax.set_title('') # T√≠tulo j√° est√° no st.subheader
        plt.xticks(rotation=45, ha='right') # Ajusta rota√ß√£o e alinhamento para nomes longos
        plt.tight_layout() # Ajusta o layout para evitar sobreposi√ß√£o
        st.pyplot(fig)


    with col2:
        st.markdown("##### N√≠vel de Prioridade das A√ß√µes")
        prioridade_counts = df['prioridade'].value_counts()
        # Definir ordem das prioridades para o gr√°fico
        prioridade_order = ['CR√çTICA', 'ALTA', 'M√âDIA', 'BAIXA']
        # Reindexar para garantir a ordem e incluir prioridades que podem ter 0 an√∫ncios
        prioridade_counts = prioridade_counts.reindex(prioridade_order, fill_value=0)

        fig_priority, ax_priority = plt.subplots(figsize=(8, 6)) # Aumenta o tamanho
        # Cores para as prioridades (distintas do gr√°fico de a√ß√µes)
        priority_colors = {
            'CR√çTICA': '#DC3545', # Vermelho forte
            'ALTA': '#FD7E14',    # Laranja
            'M√âDIA': '#FFC107',   # Amarelo
            'BAIXA': '#28A745'    # Verde
        }
        bar_colors = [priority_colors.get(p, '#6C757D') for p in prioridade_counts.index]

        # Inverte a ordem para que 'CR√çTICA' fique no topo se for horizontal
        # Garante que a ordem visual das barras corresponda √† 'prioridade_order'
        prioridade_counts_sorted = prioridade_counts[prioridade_order[::-1]] # Inverte a ordem para plotar

        ax_priority.barh(prioridade_counts_sorted.index, prioridade_counts_sorted.values, color=bar_colors[::-1]) # Inverte cores tamb√©m
        ax_priority.set_xlabel('Quantidade de An√∫ncios')
        ax_priority.set_ylabel('Prioridade')
        ax_priority.set_title('') # T√≠tulo j√° est√° no st.subheader
        # Adicionar valores nas barras
        for index, value in enumerate(prioridade_counts_sorted.values):
            ax_priority.text(value, index, str(value), va='center') # Adiciona o n√∫mero dentro/ao lado da barra

        plt.tight_layout()
        st.pyplot(fig_priority)

    # An√°lise por categoria de an√∫ncio
    st.subheader("üìä Performance por Categoria de An√∫ncio")
    categoria_stats = df.groupby('categoria_anuncio').agg(
        investimento=(COLUNAS['investimento'], 'sum'),
        conversas=(COLUNAS['conversas'], 'sum'),
        score_qualidade=('score_qualidade', 'mean'),
        impressoes=(COLUNAS['impressoes'], 'sum')
    ).reset_index()
    categoria_stats['cpl_categoria'] = np.where(
        categoria_stats['conversas'] > 0,
        categoria_stats['investimento'] / categoria_stats['conversas'],
        np.inf
    )

    st.dataframe(categoria_stats.style.format({
        'investimento': 'R$ {:.2f}',
        'cpl_categoria': lambda x: 'R$ {:.2f}'.format(x) if x != np.inf else 'N/A',
        'score_qualidade': '{:.1f}',
        'impressoes': '{:,.0f}'
    }))

    # An√°lise por posicionamento
    st.subheader("üì± Performance por Posicionamento")
    posicionamento_stats = df.groupby('categoria_posicionamento').agg(
        investimento=(COLUNAS['investimento'], 'sum'),
        conversas=(COLUNAS['conversas'], 'sum'),
        ctr_link=(COLUNAS['ctr_link'], 'mean'),
        eficiencia_impressao=('eficiencia_impressao', 'mean')
    ).reset_index()
    posicionamento_stats['cpl_posicionamento'] = np.where(
        posicionamento_stats['conversas'] > 0,
        posicionamento_stats['investimento'] / posicionamento_stats['conversas'],
        np.inf
    )

    st.dataframe(posicionamento_stats.style.format({
        'investimento': 'R$ {:.2f}',
        'cpl_posicionamento': lambda x: 'R$ {:.2f}'.format(x) if x != np.inf else 'N/A',
        'ctr_link': '{:.2f}%',
        'eficiencia_impressao': '{:.3f}'
    }))

    # Top an√∫ncios por categoria
    st.subheader("üèÜ Top 5 Performers por Categoria")

    for categoria in df['categoria_anuncio'].unique():
        if pd.notna(categoria):
            st.write(f"### {categoria}")
            df_categoria = df[df['categoria_anuncio'] == categoria]
            # Filtrar por an√∫ncios que geraram conversas e n√£o foram marcados para Pausar por alto gasto e zero leads
            df_top = df_categoria[df_categoria[COLUNAS['conversas']] > 0].nsmallest(5, 'cpl_calculado')

            if not df_top.empty:
                cols_display = [
                    COLUNAS['anuncio'],
                    COLUNAS['investimento'],
                    COLUNAS['conversas'],
                    'cpl_calculado',
                    'score_qualidade',
                    'recomendacao_acao',
                    'prioridade' # Adicionado prioridade para visualiza√ß√£o
                ]
                st.dataframe(df_top[cols_display].style.format({
                    COLUNAS['investimento']: 'R$ {:.2f}',
                    'cpl_calculado': 'R$ {:.2f}',
                    'score_qualidade': '{:.0f}'
                }))
            else:
                st.info(f"Nenhum an√∫ncio com convers√£o encontrado para {categoria}")

    # An√°lise temporal
    if COLUNAS['dia'] in df.columns:
        st.subheader("üìÖ An√°lise de Tend√™ncia por Dia")
        df[COLUNAS['dia']] = pd.to_datetime(df[COLUNAS['dia']], errors='coerce')
        df_temporal = df.groupby(COLUNAS['dia']).agg(
            investimento=(COLUNAS['investimento'], 'sum'),
            conversas=(COLUNAS['conversas'], 'sum')
        ).reset_index()

        df_temporal['cpl_diario'] = np.where(
            df_temporal['conversas'] > 0,
            df_temporal['investimento'] / df_temporal['conversas'],
            np.nan
        )

        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))

        # Investimento e leads por dia
        ax1.plot(df_temporal[COLUNAS['dia']], df_temporal['investimento'], label='Investimento', color='blue')
        ax1_twin = ax1.twinx()
        ax1_twin.plot(df_temporal[COLUNAS['dia']], df_temporal['conversas'],
                     label='Leads', color='green', linestyle='--')
        ax1.set_ylabel('Investimento (R$)', color='blue')
        ax1_twin.set_ylabel('Leads', color='green')
        ax1.set_title('Investimento e Leads por Dia')
        ax1.tick_params(axis='x', rotation=45) # Rotaciona labels do eixo X
        ax1.legend(loc="upper left")
        ax1_twin.legend(loc="upper right")

        # CPL(Custo por Lead) por dia
        ax2.plot(df_temporal[COLUNAS['dia']], df_temporal['cpl_diario'], color='red', marker='o')
        ax2.set_ylabel('CPL(Custo por Lead) (R$)')
        ax2.set_title('CPL(Custo por Lead) por Dia')
        ax2.axhline(y=cpl_meta, color='orange', linestyle='--', label=f'Meta CPL(Custo por Lead) (R$ {cpl_meta})')
        ax2.legend()
        ax2.grid(True)
        ax2.tick_params(axis='x', rotation=45) # Rotaciona labels do eixo X

        plt.tight_layout()
        st.pyplot(fig)

    else:
        st.warning("‚ö†Ô∏è Coluna 'Dia' n√£o encontrada. Exporte seu relat√≥rio do Meta Ads com a op√ß√£o 'Quebrar por Dia' para ativar esta an√°lise de tend√™ncia.")

    # Tabela completa com filtros
    st.subheader("üìã An√°lise Detalhada com Filtros")

    # Filtros
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        campanhas = ['Todas'] + list(df[COLUNAS['campanha']].unique())
        campanha_selecionada = st.selectbox("Campanha", campanhas)

    with col2:
        acoes = ['Todas'] + list(df['recomendacao_acao'].unique())
        acao_selecionada = st.selectbox("A√ß√£o Recomendada", acoes)

    with col3:
        categorias = ['Todas'] + list(df['categoria_anuncio'].unique())
        categoria_selecionada = st.selectbox("Categoria", categorias)

    with col4:
        prioridades = ['Todas'] + list(df['prioridade'].unique())
        prioridade_selecionada = st.selectbox("Prioridade", prioridades)

    # Aplicar filtros
    df_filtered = df.copy()
    if campanha_selecionada != 'Todas': df_filtered = df_filtered[df_filtered[COLUNAS['campanha']] == campanha_selecionada]
    if acao_selecionada != 'Todas': df_filtered = df_filtered[df_filtered['recomendacao_acao'] == acao_selecionada]
    if categoria_selecionada != 'Todas': df_filtered = df_filtered[df_filtered['categoria_anuncio'] == categoria_selecionada]
    if prioridade_selecionada != 'Todas': df_filtered = df_filtered[df_filtered['prioridade'] == prioridade_selecionada]

    # Colunas para exibi√ß√£o
    colunas_exibicao = [
        COLUNAS['campanha'], COLUNAS['anuncio'], 'categoria_anuncio',
        'categoria_posicionamento', COLUNAS['investimento'], COLUNAS['conversas'],
        'cpl_calculado', 'classificacao_performance', 'recomendacao_acao',
        'prioridade', 'score_qualidade', 'roi_estimado', 'status_fadiga',
        'taxa_conversao', COLUNAS['ctr_link'], COLUNAS['cpm'], COLUNAS['frequencia'], COLUNAS['cliques_link']
    ]

    st.dataframe(
        df_filtered[colunas_exibicao].style.format({
            COLUNAS['investimento']: 'R$ {:.2f}',
            'cpl_calculado': lambda x: 'R$ {:.2f}'.format(x) if x != np.inf else 'N/A',
            'score_qualidade': '{:.0f}',
            'roi_estimado': '{:.1f}%',
            'taxa_conversao': '{:.2f}%',
            COLUNAS['ctr_link']: '{:.2f}%',
            COLUNAS['cpm']: 'R$ {:.2f}',
            COLUNAS['frequencia']: '{:.2f}',
            COLUNAS['cliques_link']: '{:,.0f}'
        }),
        use_container_width=True
    )

    # Download da planilha analisada
    st.subheader("üì• Download da An√°lise")

    @st.cache_data
    def convert_df_to_excel(dataframe):
        from io import BytesIO
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            dataframe.to_excel(writer, index=False, sheet_name='An√°lise_Completa')
        return output.getvalue()

    excel_data = convert_df_to_excel(df_filtered)
    st.download_button(
        label="üìä Baixar Planilha com An√°lises",
        data=excel_data,
        file_name=f"analise_meta_ads_aprimorada_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # Resumo executivo
    st.header("üìã Resumo Executivo")

    # Calcula as contagens para o resumo
    pausar_urgente = len(df[df['recomendacao_acao'] == '‚õî PAUSAR (Alto Gasto, Zero Leads)'])
    manter_em_analise = len(df[df['recomendacao_acao'] == '‚è≥ MANTER EM AN√ÅLISE (Baixo Gasto, Zero Leads)'])
    duplicar = len(df[df['recomendacao_acao'] == 'üìà DUPLICAR (Performance Excelente)'])
    novo_criativo = len(df[df['recomendacao_acao'] == 'üé® NOVO CRIATIVO (Fadiga Detectada)'])
    recriar_cpl_inviavel = len(df[df['recomendacao_acao'] == 'üîÑ RECRIAR (CPL(Custo por Lead) Invi√°vel/Criativo Inadequado)'])
    recriar_metricas_fracas = len(df[df['recomendacao_acao'] == 'üîÑ RECRIAR (M√©tricas Fracas/Sem Dire√ß√£o)'])
    otimizar_relevancia = len(df[df['recomendacao_acao'] == 'üîß OTIMIZAR (Relev√¢ncia Criativo/CTR(Taxa de Cliques no Link) Baixo)'])
    otimizar_custo_exibicao = len(df[df['recomendacao_acao'] == 'üîß OTIMIZAR (Custo de Exibi√ß√£o Alto/CPM(Custo por Mil Impress√µes))'])
    otimizar_oferta_funil = len(df[df['recomendacao_acao'] == 'üîß OTIMIZAR (Oferta/Funil P√≥s-Clique)'])
    otimizar_ajustes_finais = len(df[df['recomendacao_acao'] == 'üîß OTIMIZAR (Ajustes Finas/Monitoramento)'])
    reavaliar_estrategia = len(df[df['recomendacao_acao'] == 'üí° REAVALIAR ESTRAT√âGIA (Outros Cen√°rios)'])

    # C√°lculo da economia potencial (apenas an√∫ncios para PAUSAR com gasto >= investimento_min)
    economia_potencial = df[df['recomendacao_acao'] == '‚õî PAUSAR (Alto Gasto, Zero Leads)'][COLUNAS['investimento']].sum()

    st.markdown(f"""
    ### üéØ **A√ß√µes Priorit√°rias Detalhadas:**
    
    **üö® CR√çTICA - Pausar e Recriar:**
    *   **‚õî Pausar (Alto Gasto, Zero Leads): {pausar_urgente} an√∫ncios** 
        > {INSIGHTS_APRIMORADOS['‚õî PAUSAR (Alto Gasto, Zero Leads)']}
    *   **üîÑ Recriar (CPL(Custo por Lead) Invi√°vel/Criativo Inadequado): {recriar_cpl_inviavel} an√∫ncios**
        > {INSIGHTS_APRIMORADOS['üîÑ RECRIAR (CPL(Custo por Lead) Invi√°vel/Criativo Inadequado)']}
    
    **üìà ALTA - Escalar e Renovar Estrat√©gia:**
    *   **üìà Duplicar (Performance Excelente): {duplicar} an√∫ncios**
        > {INSIGHTS_APRIMORADOS['üìà DUPLICAR (Performance Excelente)']}
    *   **üîÑ Recriar (M√©tricas Fracas/Sem Dire√ß√£o): {recriar_metricas_fracas} an√∫ncios**
        > {INSIGHTS_APRIMORADOS['üîÑ RECRIAR (M√©tricas Fracas/Sem Dire√ß√£o)']}

    **üîß M√âDIA - Otimizar e Diagnosticar:**
    *   **üé® Novo Criativo (Fadiga Detectada): {novo_criativo} an√∫ncios**
        > {INSIGHTS_APRIMORADOS['üé® NOVO CRIATIVO (Fadiga Detectada)']}
    *   **üîß Otimizar (Relev√¢ncia Criativo/CTR(Taxa de Cliques no Link) Baixo): {otimizar_relevancia} an√∫ncios**
        > {INSIGHTS_APRIMORADOS['üîß OTIMIZAR (Relev√¢ncia Criativo/CTR(Taxa de Cliques no Link) Baixo)']}
    *   **üîß Otimizar (Custo de Exibi√ß√£o Alto/CPM(Custo por Mil Impress√µes)): {otimizar_custo_exibicao} an√∫ncios**
        > {INSIGHTS_APRIMORADOS['üîß OTIMIZAR (Custo de Exibi√ß√£o Alto/CPM(Custo por Mil Impress√µes))']}
    *   **üîß Otimizar (Oferta/Funil P√≥s-Clique): {otimizar_oferta_funil} an√∫ncios**
        > {INSIGHTS_APRIMORADOS['üîß OTIMIZAR (Oferta/Funil P√≥s-Clique)']}
    *   **üí° Reavaliar Estrat√©gia (Outros Cen√°rios): {reavaliar_estrategia} an√∫ncios**
        > {INSIGHTS_APRIMORADOS['üí° REAVALIAR ESTRAT√âGIA (Outros Cen√°rios)']}

    **‚è≥ BAIXA - Monitorar:**
    *   **‚è≥ Manter em An√°lise (Baixo Gasto, Zero Leads): {manter_em_analise} an√∫ncios**
        > {INSIGHTS_APRIMORADOS['‚è≥ MANTER EM AN√ÅLISE (Baixo Gasto, Zero Leads)']}
    *   **üîß Otimizar (Ajustes Finas/Monitoramento): {otimizar_ajustes_finais} an√∫ncios**
        > {INSIGHTS_APRIMORADOS['üîß OTIMIZAR (Ajustes Finas/Monitoramento)']}

    ---

    ### üí° **Principais Insights Globais:**
    
    1.  **CPL (Custo por Lead/Conversa) M√©dio Atual:** R$ {cpl_medio:.2f} (Meta: R$ {cpl_meta:.2f}) - {('Atingido' if cpl_medio <= cpl_meta else 'Acima da Meta')}
    2.  **Taxa de Convers√£o (Cliques -> Leads):** {df['taxa_conversao'].mean():.2f}% - M√©dia geral da efici√™ncia do funil p√≥s-clique.
    3.  **Economia Potencial (Pausando Ineficientes):** R$ {economia_potencial:.2f} - Valor que pode ser realocado imediatamente para an√∫ncios de melhor performance.
    4.  **ROI (Retorno sobre o Investimento) M√©dio (Estimado):** {df['roi_estimado'].mean():.1f}% - Retorno potencial geral da conta com base no valor de um lead.
    5.  **Score M√©dio de Qualidade:** {df['score_qualidade'].mean():.1f}/100 - Avalia√ß√£o sint√©tica da sa√∫de geral dos an√∫ncios.

    ---

    ### üöÄ **Pr√≥ximos Passos Recomendados:**
    
    1.  **A√ß√£o Imediata:** Pausar an√∫ncios classificados como "‚õî PAUSAR (Alto Gasto, Zero Leads)".
    2.  **Acelerar Crescimento:** Duplicar e escalar an√∫ncios classificados como "üìà DUPLICAR (Performance Excelente)".
    3.  **Renova√ß√£o Constante:** Criar novos criativos para an√∫ncios com "üé® NOVO CRIATIVO (Fadiga Detectada)" ou "üîÑ RECRIAR (CPL(Custo por Lead) Invi√°vel/Criativo Inadequado)".
    4.  **An√°lise e Ajustes Pontuais:** Focar em otimizar an√∫ncios classificados como "üîß OTIMIZAR (...)" com base nos diagn√≥sticos detalhados.
    5.  **Revis√£o Estrat√©gica:** Avaliar profundamente os an√∫ncios em "üîÑ RECRIAR (M√©tricas Fracas/Sem Dire√ß√£o)" e "üí° REAVALIAR ESTRAT√âGIA (Outros Cen√°rios)" para entender falhas e planejar novos testes.
    6.  **Realoca√ß√£o de Or√ßamento:** Transferir o or√ßamento economizado para an√∫ncios de alta performance e novos testes.
    """)
